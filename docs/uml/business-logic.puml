@startuml Business

package "Business Logic Layer" {
    package "Services Layer" {
        interface IExpenseService {
            + GetAllExpenses() : Task<IList<ExpenseResponse>>
            + GetExpenseById(Guid expenseId) : Task<ExpenseResponse>
            + CreateExpense(ExpenseCreateRequest expense) : Task<int>
            + UpdateExpense(ExpenseUpdateRequest expense) : Task<int>
            + DeleteExpense(Guid expenseId) : Task<bool>
        }

        interface IIncomeService {
            + GetAllIncomes() : Task<IList<IncomeResponse>>
            + GetIncomeById(Guid incomeId) : Task<IncomeResponse>
            + CreateIncome(IncomeCreateRequest income) : Task<int>
            + UpdateIncome(IncomeUpdateRequest income) : Task<int>
            + DeleteIncome(Guid incomeId) : Task<bool>
        }

        interface IUserService {
            + RegisterUser()
            + LoginUser()
            + UpdateProfile()
            + ResetPassword()
        }

        ' Observer pattern to notify about budget thresholds
        interface IBudgetObserver {
            + NotifyBudgetExceeded()
        }

        package "Logic Layer" {
            class ExpenseService {
                - _expenseRepository: IExpenseRepository
                - observers: List<IBudgetObserver>
                + AddObserver(observer: IBudgetObserver)
                + RemoveObserver(observer: IBudgetObserver)
                + NotifyBudgetExceeded()
            }

            class IncomeService {
                - _incomeRepository: IIncomeRepository
            }

            class UserService {
                - _userRepository: IUserRepository
            }
        }
    }

    package "DTO Adapters" {
        class UserCreateRequest << (R, #FFAAAA) >> {
            - AccountName : string
            - Email : string
            - Password : string
            + ToDomain() : User
        }

        class UserUpdateRequest << (R, #FFAAAA) >> {
            - AccountName : string
            - Email : string
            - Password : string
            + ToDomain() : User
        }

        class ExpenseCreateRequest << (R, #FFAAAA) >> {
            - Amount : decimal
            - Description : string
            - Category : string
            - Date : DateTime
            + ToDomain() : Expense
        }

        class ExpenseUpdateRequest << (R, #FFAAAA) >> {
            - Amount : decimal
            - Description : string
            - Category : string
            - Date : DateTime
            + ToDomain() : Expense
        }

        class IncomeCreateRequest << (R, #FFAAAA) >> {
            - Amount : decimal
            - Source : string
            - Date : DateTime
            + ToDomain() : Income
        }

        class IncomeUpdateRequest << (R, #FFAAAA) >> {
            - Amount : decimal
            - Source : string
            - Date : DateTime
            + ToDomain() : Income
        }

        class BudgetCreateRequest << (R, #FFAAAA) >> {
            - BudgetAmount : decimal 
            - Month : DateTime
            + ToDomain() : Budget
        }

        class BudgetUpdateRequest << (R, #FFAAAA) >> {
            - BudgetAmount : decimal 
            - Month : DateTime
            + ToDomain() : Budget
        }

        class GoalCreateRequest << (R, #FFAAAA) >> {
            - GoalAmount : decimal
            - Deadline : DateTime
            - CurrentAmount : decimal
            + ToDomain() : Goal
        }

        class GoalUpdateRequest << (R, #FFAAAA) >> {
            - GoalAmount : decimal
            - Deadline : DateTime
            - CurrentAmount : decimal
            + ToDomain() : Goal
        }
    }

    package "VO Adapters" {
        class UserResponse << (R, #FFAAAA) >> {
            - AccountName : string
            - Email : string
            - Password : string
            + {static} FromDomain(User user) : UserResponse
        }

        class ExpenseResponse << (R, #FFAAAA) >> {
            - Amount : decimal
            - Description : string
            - Category : string
            - Date : DateTime
            + {static} FromDomain(Expense expense) : ExpenseResponse
        }

        class IncomeResponse << (R, #FFAAAA) >> {
            - Amount : decimal
            - Source : string
            - Date : DateTime
            + {static} FromDomain(Income income) : IncomeResponse
        }

        class BudgetResponse << (R, #FFAAAA) >> {
            - BudgetAmount : decimal 
            - Month : DateTime
            + {static} FromDomain(Budget budget) : BudgetResponse
        }

        class GoalResponse << (R, #FFAAAA) >> {
            - GoalAmount : decimal
            - Deadline : DateTime
            - CurrentAmount : decimal
            + {static} FromDomain(Goal goal) : GoalResponse
        }
    }
}

@enduml
