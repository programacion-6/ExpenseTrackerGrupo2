@startuml Business

package "Business Logic Layer" {
    package "Services Layer" {
            interface IExpenseService {
            + CreateExpense()
            + GetExpenses()
            + UpdateExpense()
            + DeleteExpense()
        }

            interface IIncomeService {
            + CreateIncome()
            + GetIncomes()
            + UpdateIncome()
            + DeleteIncome()
        }

        interface IUserService {
            + RegisterUser()
            + LoginUser()
            + UpdateProfile()
            + ResetPassword()
        }

        ' Applying Factory Pattern for Services
        interface IServiceFactory {
            + CreateExpenseService(): IExpenseService
            + CreateIncomeService(): IIncomeService
            + CreateUserService(): IUserService
        }

        class ServiceFactory implements IServiceFactory {
            + CreateExpenseService() : IExpenseService
            + CreateIncomeService() : IIncomeService
            + CreateUserService() : IUserService
        }

        ' Observer pattern to notify about budget thresholds
        interface IBudgetObserver {
            + NotifyBudgetExceeded()
        }
    }

    package "Logic Layer" {
        class ExpenseService implements IExpenseService {
            - expenseRepository: IExpenseRepository
            - observers: List<IBudgetObserver>
            + AddObserver(observer: IBudgetObserver)
            + RemoveObserver(observer: IBudgetObserver)
            + CreateExpense()
            + GetExpenses()
            + UpdateExpense()
            + DeleteExpense()
            + NotifyBudgetExceeded()
        }

        class IncomeService implements IIncomeService {
            - incomeRepository: IIncomeRepository
            + CreateIncome()
            + GetIncomes()
            + UpdateIncome()
            + DeleteIncome()
        }

        class UserService implements IUserService {
            - userRepository: IUserRepository
            + RegisterUser()
            + LoginUser()
            + UpdateProfile()
            + ResetPassword()
        }
    }

    package "DTO Adapters" {
        class UserCreateRequest << (R, #FFAAAA) >> {
            - AccountName : string
            - Email : string
            - Password : string
        }

        class UserUpdateRequest << (R, #FFAAAA) >> {
            - AccountName : string
            - Email : string
            - Password : string
        }

        class ExpenseCreateRequest << (R, #FFAAAA) >> {
            - Amount : decimal
            - Description : string
            - Category : string
            - Date : DateTime
        }

        class ExpenseUpdateRequest << (R, #FFAAAA) >> {
            - Amount : decimal
            - Description : string
            - Category : string
            - Date : DateTime
        }

        class IncomeCreateRequest << (R, #FFAAAA) >> {
            - Amount : decimal
            - Source : string
            - Date : DateTime
        }

        class IncomeUpdateRequest << (R, #FFAAAA) >> {
            - Amount : decimal
            - Source : string
            - Date : DateTime
        }

        class BudgetCreateRequest << (R, #FFAAAA) >> {
            - BudgetAmount : decimal 
            - Month : DateTime
        }

        class BudgetUpdateRequest << (R, #FFAAAA) >> {
            - BudgetAmount : decimal 
            - Month : DateTime
        }

        class GoalCreateRequest << (R, #FFAAAA) >> {
            - GoalAmount : decimal
            - Deadline : DateTime
            - CurrentAmount : decimal
        }

        class GoalUpdateRequest << (R, #FFAAAA) >> {
            - GoalAmount : decimal
            - Deadline : DateTime
            - CurrentAmount : decimal
        }
    }

    package "VO Adapters" {
        class UserResponse << (R, #FFAAAA) >> {
            - AccountName : string
            - Email : string
            - Password : string
        }

        class ExpenseResponse << (R, #FFAAAA) >> {
            - Amount : decimal
            - Description : string
            - Category : string
            - Date : DateTime
        }

        class IncomeResponse << (R, #FFAAAA) >> {
            - Amount : decimal
            - Source : string
            - Date : DateTime
        }

        class BudgetResponse << (R, #FFAAAA) >> {
            - BudgetAmount : decimal 
            - Month : DateTime
        }

        class GoalResponse << (R, #FFAAAA) >> {
            - GoalAmount : decimal
            - Deadline : DateTime
            - CurrentAmount : decimal
        }
    }
}

@enduml
